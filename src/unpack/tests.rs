#![cfg(test)]

use super::*;

#[test]
fn test_swap_endianness_32bit() {
    let input = helper_input();
    let output = swap_endianness_32bit(&input);
    let output_output = swap_endianness_32bit(&output);
    assert_eq!(output, helper_output_32bit_swap());
    assert_eq!(output_output, input);
}

#[test]
fn test_swap_endianness_64bit() {
    let input = helper_input();
    let output = swap_endianness_64bit(&input);
    let output_output = swap_endianness_64bit(&output);
    assert_eq!(output, helper_output_64bit_swap());
    assert_eq!(output_output, input);
}

#[test]
fn test_unpack4_le() {
    let input = helper_input();
    let output = unpack4(&input, false);
    assert_eq!(output, helper_output_unpack4_le());
}

#[test]
fn test_unpack4_be() {
    let input = helper_input();
    let output = unpack4(&input, true);
    assert_eq!(output, helper_output_unpack4_be());
}

#[test]
fn test_unpack5_le() {
    let input = helper_input();
    let output = unpack5(&input, false);
    assert_eq!(output, helper_output_unpack5_le());
}

#[test]
fn test_unpack5_be() {
    let input = helper_input();
    let output = unpack5(&input, true);
    assert_eq!(output, helper_output_unpack5_be());
}

/// Returns a vector of 120 randomly generated bytes for testing purposes.
/// Generated in python with seed 0. 120 bytes is chosen to have a 64, 32,
/// 16, and 8 byte chunk so all code paths will be reached.
fn helper_input() -> Vec<u8> {
    vec![
        0xc5, 0xd7, 0x14, 0x84, 0xf8, 0xcf, 0x9b, 0xf4, 0xb7, 0x6f, 0x47, 0x90, 0x47, 0x30, 0x80,
        0x4b, 0x9e, 0x32, 0x25, 0xa9, 0xf1, 0x33, 0xb5, 0xde, 0xa1, 0x68, 0xf4, 0xe2, 0x85, 0x1f,
        0x07, 0x2f, 0xcc, 0x00, 0xfc, 0xaa, 0x7c, 0xa6, 0x20, 0x61, 0x71, 0x7a, 0x48, 0xe5, 0x2e,
        0x29, 0xa3, 0xfa, 0x37, 0x9a, 0x95, 0x3f, 0xaa, 0x68, 0x93, 0xe3, 0x2e, 0xc5, 0xa2, 0x7b,
        0x94, 0x5e, 0x60, 0x5f, 0x10, 0x85, 0xf3, 0x23, 0x2d, 0x42, 0x4c, 0x13, 0x29, 0xc8, 0x8d,
        0x78, 0x6e, 0xd6, 0x8c, 0xe6, 0xfc, 0xb6, 0x2a, 0xa6, 0x3b, 0xf9, 0xab, 0x61, 0x7c, 0x08,
        0x8a, 0x3b, 0x70, 0xbe, 0x57, 0xaa, 0xda, 0x1f, 0x33, 0x4a, 0x70, 0x17, 0x25, 0x0d, 0x3f,
        0x60, 0x3d, 0xc8, 0x2e, 0xbd, 0x3b, 0x12, 0x0b, 0x63, 0x5e, 0x3f, 0xf5, 0x6b, 0x1f, 0x0b,
    ]
}

/// Returns the expected output of changing the endianness of the input as
/// though it were 32-bit ints. Generated with the following python:
///
/// ```python
/// from itertools import chain
/// input_bytes = [...]  # bytes from helper_input()
/// list(chain.from_iterable(input_bytes[i:i+4][::-1] for i in range(0, len(input_bytes), 4)))
/// ````
fn helper_output_32bit_swap() -> Vec<u8> {
    vec![
        0x84, 0x14, 0xd7, 0xc5, 0xf4, 0x9b, 0xcf, 0xf8, 0x90, 0x47, 0x6f, 0xb7, 0x4b, 0x80, 0x30,
        0x47, 0xa9, 0x25, 0x32, 0x9e, 0xde, 0xb5, 0x33, 0xf1, 0xe2, 0xf4, 0x68, 0xa1, 0x2f, 0x07,
        0x1f, 0x85, 0xaa, 0xfc, 0x00, 0xcc, 0x61, 0x20, 0xa6, 0x7c, 0xe5, 0x48, 0x7a, 0x71, 0xfa,
        0xa3, 0x29, 0x2e, 0x3f, 0x95, 0x9a, 0x37, 0xe3, 0x93, 0x68, 0xaa, 0x7b, 0xa2, 0xc5, 0x2e,
        0x5f, 0x60, 0x5e, 0x94, 0x23, 0xf3, 0x85, 0x10, 0x13, 0x4c, 0x42, 0x2d, 0x78, 0x8d, 0xc8,
        0x29, 0xe6, 0x8c, 0xd6, 0x6e, 0xa6, 0x2a, 0xb6, 0xfc, 0x61, 0xab, 0xf9, 0x3b, 0x3b, 0x8a,
        0x08, 0x7c, 0xaa, 0x57, 0xbe, 0x70, 0x4a, 0x33, 0x1f, 0xda, 0x0d, 0x25, 0x17, 0x70, 0xc8,
        0x3d, 0x60, 0x3f, 0x12, 0x3b, 0xbd, 0x2e, 0x3f, 0x5e, 0x63, 0x0b, 0x0b, 0x1f, 0x6b, 0xf5,
    ]
}

/// Returns the expected output of changing the endianness of the input as
/// though it were 64-bit ints. Generated with the following python:
///
/// ```python
/// from itertools import chain
/// input_bytes = [...]  # bytes from helper_input()
/// list(chain.from_iterable(input_bytes[i:i+8][::-1] for i in range(0, len(input_bytes), 8)))
/// ````
fn helper_output_64bit_swap() -> Vec<u8> {
    vec![
        0xf4, 0x9b, 0xcf, 0xf8, 0x84, 0x14, 0xd7, 0xc5, 0x4b, 0x80, 0x30, 0x47, 0x90, 0x47, 0x6f,
        0xb7, 0xde, 0xb5, 0x33, 0xf1, 0xa9, 0x25, 0x32, 0x9e, 0x2f, 0x07, 0x1f, 0x85, 0xe2, 0xf4,
        0x68, 0xa1, 0x61, 0x20, 0xa6, 0x7c, 0xaa, 0xfc, 0x00, 0xcc, 0xfa, 0xa3, 0x29, 0x2e, 0xe5,
        0x48, 0x7a, 0x71, 0xe3, 0x93, 0x68, 0xaa, 0x3f, 0x95, 0x9a, 0x37, 0x5f, 0x60, 0x5e, 0x94,
        0x7b, 0xa2, 0xc5, 0x2e, 0x13, 0x4c, 0x42, 0x2d, 0x23, 0xf3, 0x85, 0x10, 0xe6, 0x8c, 0xd6,
        0x6e, 0x78, 0x8d, 0xc8, 0x29, 0x61, 0xab, 0xf9, 0x3b, 0xa6, 0x2a, 0xb6, 0xfc, 0xaa, 0x57,
        0xbe, 0x70, 0x3b, 0x8a, 0x08, 0x7c, 0x0d, 0x25, 0x17, 0x70, 0x4a, 0x33, 0x1f, 0xda, 0x12,
        0x3b, 0xbd, 0x2e, 0xc8, 0x3d, 0x60, 0x3f, 0x0b, 0x1f, 0x6b, 0xf5, 0x3f, 0x5e, 0x63, 0x0b,
    ]
}

/// Returns the expected output of unpacking 4-bit values from the input as
/// though it were little endian. Generated with the following python:
///
/// ```python
/// input_bytes = [...]  # bytes from helper_input()
/// input_longs = [int.from_bytes(bytes(input_bytes[i:i+8]), byteorder="little") for i in range(0, len(input_bytes), 8)]
/// unpack4 = [(i >> (4 * j)) & 0x0f for i in input_longs for j in range(16)]
/// ```
fn helper_output_unpack4_le() -> Vec<u16> {
    vec![
        0x5, 0xc, 0x7, 0xd, 0x4, 0x1, 0x4, 0x8, 0x8, 0xf, 0xf, 0xc, 0xb, 0x9, 0x4, 0xf, 0x7, 0xb,
        0xf, 0x6, 0x7, 0x4, 0x0, 0x9, 0x7, 0x4, 0x0, 0x3, 0x0, 0x8, 0xb, 0x4, 0xe, 0x9, 0x2, 0x3,
        0x5, 0x2, 0x9, 0xa, 0x1, 0xf, 0x3, 0x3, 0x5, 0xb, 0xe, 0xd, 0x1, 0xa, 0x8, 0x6, 0x4, 0xf,
        0x2, 0xe, 0x5, 0x8, 0xf, 0x1, 0x7, 0x0, 0xf, 0x2, 0xc, 0xc, 0x0, 0x0, 0xc, 0xf, 0xa, 0xa,
        0xc, 0x7, 0x6, 0xa, 0x0, 0x2, 0x1, 0x6, 0x1, 0x7, 0xa, 0x7, 0x8, 0x4, 0x5, 0xe, 0xe, 0x2,
        0x9, 0x2, 0x3, 0xa, 0xa, 0xf, 0x7, 0x3, 0xa, 0x9, 0x5, 0x9, 0xf, 0x3, 0xa, 0xa, 0x8, 0x6,
        0x3, 0x9, 0x3, 0xe, 0xe, 0x2, 0x5, 0xc, 0x2, 0xa, 0xb, 0x7, 0x4, 0x9, 0xe, 0x5, 0x0, 0x6,
        0xf, 0x5, 0x0, 0x1, 0x5, 0x8, 0x3, 0xf, 0x3, 0x2, 0xd, 0x2, 0x2, 0x4, 0xc, 0x4, 0x3, 0x1,
        0x9, 0x2, 0x8, 0xc, 0xd, 0x8, 0x8, 0x7, 0xe, 0x6, 0x6, 0xd, 0xc, 0x8, 0x6, 0xe, 0xc, 0xf,
        0x6, 0xb, 0xa, 0x2, 0x6, 0xa, 0xb, 0x3, 0x9, 0xf, 0xb, 0xa, 0x1, 0x6, 0xc, 0x7, 0x8, 0x0,
        0xa, 0x8, 0xb, 0x3, 0x0, 0x7, 0xe, 0xb, 0x7, 0x5, 0xa, 0xa, 0xa, 0xd, 0xf, 0x1, 0x3, 0x3,
        0xa, 0x4, 0x0, 0x7, 0x7, 0x1, 0x5, 0x2, 0xd, 0x0, 0xf, 0x3, 0x0, 0x6, 0xd, 0x3, 0x8, 0xc,
        0xe, 0x2, 0xd, 0xb, 0xb, 0x3, 0x2, 0x1, 0xb, 0x0, 0x3, 0x6, 0xe, 0x5, 0xf, 0x3, 0x5, 0xf,
        0xb, 0x6, 0xf, 0x1, 0xb, 0x0,
    ]
}

/// Returns the expected output of unpacking 4-bit values from the input as
/// though it were big endian. Generated with the following python:
///
/// ```python
/// input_bytes = [...]  # bytes from helper_input()
/// input_longs = [int.from_bytes(bytes(input_bytes[i:i+8]), byteorder="big") for i in range(0, len(input_bytes), 8)]
/// unpack4 = [(i >> (4 * j)) & 0x0f for i in input_longs for j in range(16)]
/// ```
fn helper_output_unpack4_be() -> Vec<u16> {
    vec![
        0x4, 0xf, 0xb, 0x9, 0xf, 0xc, 0x8, 0xf, 0x4, 0x8, 0x4, 0x1, 0x7, 0xd, 0x5, 0xc, 0xb, 0x4,
        0x0, 0x8, 0x0, 0x3, 0x7, 0x4, 0x0, 0x9, 0x7, 0x4, 0xf, 0x6, 0x7, 0xb, 0xe, 0xd, 0x5, 0xb,
        0x3, 0x3, 0x1, 0xf, 0x9, 0xa, 0x5, 0x2, 0x2, 0x3, 0xe, 0x9, 0xf, 0x2, 0x7, 0x0, 0xf, 0x1,
        0x5, 0x8, 0x2, 0xe, 0x4, 0xf, 0x8, 0x6, 0x1, 0xa, 0x1, 0x6, 0x0, 0x2, 0x6, 0xa, 0xc, 0x7,
        0xa, 0xa, 0xc, 0xf, 0x0, 0x0, 0xc, 0xc, 0xa, 0xf, 0x3, 0xa, 0x9, 0x2, 0xe, 0x2, 0x5, 0xe,
        0x8, 0x4, 0xa, 0x7, 0x1, 0x7, 0x3, 0xe, 0x3, 0x9, 0x8, 0x6, 0xa, 0xa, 0xf, 0x3, 0x5, 0x9,
        0xa, 0x9, 0x7, 0x3, 0xf, 0x5, 0x0, 0x6, 0xe, 0x5, 0x4, 0x9, 0xb, 0x7, 0x2, 0xa, 0x5, 0xc,
        0xe, 0x2, 0x3, 0x1, 0xc, 0x4, 0x2, 0x4, 0xd, 0x2, 0x3, 0x2, 0x3, 0xf, 0x5, 0x8, 0x0, 0x1,
        0x6, 0xe, 0xc, 0x8, 0x6, 0xd, 0xe, 0x6, 0x8, 0x7, 0xd, 0x8, 0x8, 0xc, 0x9, 0x2, 0x1, 0x6,
        0xb, 0xa, 0x9, 0xf, 0xb, 0x3, 0x6, 0xa, 0xa, 0x2, 0x6, 0xb, 0xc, 0xf, 0xa, 0xa, 0x7, 0x5,
        0xe, 0xb, 0x0, 0x7, 0xb, 0x3, 0xa, 0x8, 0x8, 0x0, 0xc, 0x7, 0xd, 0x0, 0x5, 0x2, 0x7, 0x1,
        0x0, 0x7, 0xa, 0x4, 0x3, 0x3, 0xf, 0x1, 0xa, 0xd, 0x2, 0x1, 0xb, 0x3, 0xd, 0xb, 0xe, 0x2,
        0x8, 0xc, 0xd, 0x3, 0x0, 0x6, 0xf, 0x3, 0xb, 0x0, 0xf, 0x1, 0xb, 0x6, 0x5, 0xf, 0xf, 0x3,
        0xe, 0x5, 0x3, 0x6, 0xb, 0x0,
    ]
}

/// Returns the expected output of unpacking 5-bit values from the input as
/// though it were little endian. Generated with the following python:
///
/// ```python
/// input_bytes = [...]  # bytes from helper_input()
/// input_longs = [int.from_bytes(bytes(input_bytes[i:i+8]), byteorder="little") for i in range(0, len(input_bytes), 8)]
/// unpack5 = [(i >> (5 * j)) & 0x1f for i in input_longs for j in range(12)]
/// ```
fn helper_output_unpack5_le() -> Vec<u16> {
    vec![
        0x05, 0x1e, 0x15, 0x09, 0x01, 0x02, 0x02, 0x1f, 0x0f, 0x1e, 0x06, 0x09, 0x17, 0x1d, 0x1b,
        0x0e, 0x04, 0x08, 0x1e, 0x08, 0x10, 0x01, 0x00, 0x17, 0x1e, 0x14, 0x0c, 0x0a, 0x12, 0x14,
        0x06, 0x1e, 0x13, 0x09, 0x0d, 0x1d, 0x01, 0x05, 0x1a, 0x08, 0x0f, 0x11, 0x17, 0x10, 0x1f,
        0x18, 0x01, 0x1e, 0x0c, 0x06, 0x00, 0x18, 0x0f, 0x15, 0x12, 0x0f, 0x06, 0x05, 0x08, 0x02,
        0x11, 0x13, 0x1e, 0x10, 0x14, 0x12, 0x1b, 0x05, 0x09, 0x19, 0x08, 0x15, 0x17, 0x11, 0x06,
        0x0b, 0x19, 0x1f, 0x08, 0x15, 0x08, 0x1b, 0x04, 0x07, 0x0e, 0x09, 0x11, 0x05, 0x1a, 0x1d,
        0x11, 0x12, 0x1e, 0x02, 0x18, 0x1e, 0x10, 0x08, 0x01, 0x07, 0x1f, 0x11, 0x14, 0x05, 0x02,
        0x02, 0x13, 0x06, 0x09, 0x01, 0x12, 0x1b, 0x08, 0x1c, 0x19, 0x0d, 0x16, 0x06, 0x03, 0x0d,
        0x1c, 0x17, 0x0d, 0x15, 0x02, 0x13, 0x0e, 0x07, 0x19, 0x1f, 0x0a, 0x03, 0x1c, 0x03, 0x02,
        0x14, 0x18, 0x1d, 0x00, 0x0e, 0x1e, 0x1d, 0x15, 0x14, 0x1a, 0x1e, 0x07, 0x06, 0x03, 0x05,
        0x01, 0x0e, 0x17, 0x08, 0x09, 0x1a, 0x1f, 0x01, 0x18, 0x1a, 0x03, 0x04, 0x1b, 0x05, 0x1d,
        0x1d, 0x0e, 0x04, 0x0b, 0x18, 0x18, 0x1c, 0x15, 0x1f, 0x14, 0x1e, 0x0b, 0x1b, 0x07, 0x16,
    ]
}

/// Returns the expected output of unpacking 5-bit values from the input as
/// though it were big endian. Generated with the following python:
///
/// ```python
/// input_bytes = [...]  # bytes from helper_input()
/// input_longs = [int.from_bytes(bytes(input_bytes[i:i+8]), byteorder="big") for i in range(0, len(input_bytes), 8)]
/// unpack5 = [(i >> (5 * j)) & 0x1f for i in input_longs for j in range(12)]
/// ```
fn helper_output_unpack5_be() -> Vec<u16> {
    vec![
        0x14, 0x1f, 0x06, 0x1f, 0x0c, 0x1c, 0x13, 0x10, 0x14, 0x18, 0x15, 0x0b, 0x0b, 0x02, 0x00,
        0x01, 0x13, 0x03, 0x01, 0x12, 0x07, 0x1a, 0x1b, 0x0e, 0x1e, 0x0e, 0x0d, 0x07, 0x13, 0x18,
        0x07, 0x15, 0x05, 0x11, 0x0c, 0x1c, 0x0f, 0x19, 0x01, 0x1e, 0x11, 0x02, 0x0a, 0x1c, 0x14,
        0x07, 0x1a, 0x02, 0x01, 0x03, 0x08, 0x0c, 0x0a, 0x1e, 0x09, 0x15, 0x1c, 0x07, 0x00, 0x18,
        0x1a, 0x1f, 0x08, 0x13, 0x02, 0x17, 0x14, 0x1c, 0x08, 0x12, 0x1e, 0x02, 0x03, 0x1f, 0x04,
        0x11, 0x06, 0x15, 0x1e, 0x07, 0x15, 0x14, 0x06, 0x0f, 0x1f, 0x02, 0x18, 0x1c, 0x05, 0x0a,
        0x0e, 0x0f, 0x02, 0x0d, 0x11, 0x1d, 0x13, 0x00, 0x13, 0x04, 0x14, 0x16, 0x0c, 0x04, 0x13,
        0x0f, 0x01, 0x01, 0x06, 0x07, 0x03, 0x0d, 0x0d, 0x17, 0x01, 0x0f, 0x0d, 0x04, 0x12, 0x13,
        0x01, 0x1b, 0x0a, 0x13, 0x1f, 0x1d, 0x18, 0x14, 0x0a, 0x11, 0x0d, 0x19, 0x0a, 0x1d, 0x15,
        0x1c, 0x0b, 0x18, 0x0d, 0x07, 0x0a, 0x04, 0x02, 0x18, 0x0d, 0x08, 0x09, 0x0e, 0x01, 0x18,
        0x09, 0x09, 0x13, 0x19, 0x07, 0x14, 0x12, 0x18, 0x0e, 0x1a, 0x0b, 0x17, 0x00, 0x19, 0x1d,
        0x01, 0x18, 0x1e, 0x0b, 0x18, 0x07, 0x16, 0x16, 0x1a, 0x1f, 0x07, 0x1e, 0x1a, 0x18, 0x16,
    ]
}
